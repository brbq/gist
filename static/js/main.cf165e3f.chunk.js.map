{"version":3,"sources":["gists.js","App.js","reportWebVitals.js","index.js"],"names":["gists","title","code","keys","App","useState","input","setInput","displayedGists","setGists","autoFocus","onKeyDown","event","key","keywords","split","id","filter","g","find","k","includes","sort","a","b","akey","bkey","map","value","onInput","e","target","className","onClick","el","document","createElement","body","appendChild","select","execCommand","removeChild","copyGist","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oNAmBeA,G,MAjBD,CACV,CACIC,MAAO,kBACPC,KAAK,sEAILC,KAAM,CAAC,SAAU,MAAO,OAAQ,KAAM,aAAc,UAExD,CACIF,MAAO,yBACPC,KAAK,kCAELC,KAAM,CAAC,SAAU,QAAS,MAAO,U,OCmC1BC,MA9Cf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGsBF,mBAAS,IAH/B,mBAGNG,EAHM,KAGUC,EAHV,KA+Bb,OACE,qCACE,uBAAOC,WAAS,EAACC,UA5BC,SAACC,GACrB,GAAkB,UAAdA,EAAMC,IAAiB,CACzB,IAAMC,EAAWR,EAAMS,MAAM,KACzBC,EAAG,EACPP,EACET,EACCiB,QAAO,SAACC,GAAD,OAAOJ,EAASK,MAAK,SAAAC,GAAC,OAAIF,EAAEf,KAAKkB,SAASD,SACjDE,MAAK,SAACC,EAAEC,GAGP,OAFeD,EAAEpB,KAAKc,QAAO,SAAAQ,GAAI,OAAIX,EAASK,MAAK,SAAAC,GAAC,OAAIA,IAAIK,SAC7CD,EAAErB,KAAKc,QAAO,SAAAS,GAAI,OAAIZ,EAASK,MAAK,SAAAC,GAAC,OAAIA,IAAIM,QAClC,GAAK,KAEhCC,KAAI,SAAAT,GAAC,kCAASA,GAAT,IAAYF,GAAIA,YAgBmBY,MAAOtB,EAAOuB,QAAS,SAAAC,GAAC,OAAIvB,EAASuB,EAAEC,OAAOH,UACzF,qBAAKI,UAAU,YAAf,SACCxB,EAAemB,KAAI,SAACT,GAAD,OACd,sBAAgBc,UAAU,YAAYC,QAAS,kBAdxC,SAACjB,GAChB,IAAMkB,EAAKC,SAASC,cAAc,YAClCF,EAAGN,MAAQpB,EAAeW,MAAK,SAAAD,GAAC,OAAIA,EAAEF,KAAOA,KAAId,KACjDiC,SAASE,KAAKC,YAAYJ,GAC1BA,EAAGK,SACHJ,SAASK,YAAY,QACrBL,SAASE,KAAKI,YAAYP,GAQmCQ,CAASxB,EAAEF,KAAhE,UACE,6BAAKE,EAAEjB,QACP,0BAAU0C,aAAczB,EAAEhB,SAFlBgB,EAAEF,aC5BT4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM1BZ,M","file":"static/js/main.cf165e3f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst gists = [\r\n    {\r\n        title: 'Simple for Loop',\r\n        code:\r\n`for (let i = 0; i < SomeArray.length; i++) {\r\n    // TODO: logic\r\n}`,\r\n        keys: ['simple', 'for', 'loop', 'ts', 'typescript', 'react']\r\n    },\r\n    {\r\n        title: 'Create a new react app',\r\n        code:\r\n`npx create-react-app NomeDoProj`,\r\n        keys: ['create', 'react', 'app', 'new']\r\n    }\r\n];\r\n\r\nexport default gists\r\n","import './App.css';\nimport  gists from './gists';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [input, setInput] = useState('');\n  const [displayedGists, setGists] = useState([]);\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter') {\n      const keywords = input.split(\" \");\n      let id=0;\n      setGists(\n        gists\n        .filter((g) => keywords.find(k => g.keys.includes(k)))\n        .sort((a,b) => {\n          const aCount = a.keys.filter(akey => keywords.find(k => k===akey))\n          const bCount = b.keys.filter(bkey => keywords.find(k => k===bkey))\n          return aCount >= bCount ? 1 : -1; \n        })\n        .map(g => ({...g, id: id++}))\n      );\n    }\n  }\n\n  const copyGist = (id) => {\n    const el = document.createElement('textarea');\n    el.value = displayedGists.find(g => g.id === id).code;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  }\n\n  return (\n    <>\n      <input autoFocus onKeyDown={handleKeyDown} value={input} onInput={e => setInput(e.target.value)}/>\n      <div className=\"container\">\n      {displayedGists.map((g) => (\n            <div key={g.id} className=\"clickable\" onClick={() => copyGist(g.id)}>\n              <h3>{g.title}</h3>\n              <textarea defaultValue={g.code}></textarea>\n            </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}